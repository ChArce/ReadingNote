## 第2章 单例模式 ##

定义：
确保某一个类只有一个实例，而且自行实例化并且向整个系统提供这个实例。

应用场景：
**确保某个类有且只有一个对象的场景，避免产生多个对象消耗过多的资源，或者某种类型的对象只应该有且只有一个。例如，创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源，这是就需要考虑单例模式。**


关键点：




1. 饿汉模式
2. 懒汉模式
3. DCL模式
4. 静态内部类单例模式
5. 枚举单例


**序列化和反序列化**

Context的个数= Activity个数 + Service个数 + 1

优点:


缺点：


## 第3章 Builder模式 ##



## 第4章 原型模式 ##

## 第5章 工厂方法模式 ##
创建型设计模式。

定义：
定义一个创建对象的接口，让子类决定实例化哪个类。

使用场景：
**在任何需要复杂对象的地方，都可以使用工厂方法模式。复杂对象适合使用工厂模式，用new就可以创建的对象无需使用工厂模式。**


##第六章 抽象工厂模式##
创建型设计模式

```java
public abstract class AbstractProductA {
    public abstract void method();
}
```

##第七章 策略模式##

定义了一系列的算法，并将每一个算法封装起来，而且使它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。

```java
public interface CalculateStrategy {
    int calculatePrice(int km);
}
```

